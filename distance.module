

<?php

// getDistance() 
// parameters:
//    $addressFrom: nutrishop buyer location
//    $addressTo: nutrishop store location
//    $unit: 'km' 'm' 'miles'
// returns:
//    distance between addressFrom & addressTo
// -------------------------------------------------------------
function getDistance($addressFrom, $addressTo, $unit = ''){
  // Google API key
  $apiKey = 'AIzaSyCVvSVVSL4IH4jMZtU5YHLP5konxnYlV0c';
  // Change address format
  $formattedAddrFrom    = str_replace(' ', '+', $addressFrom);
  $formattedAddrTo     = str_replace(' ', '+', $addressTo);
  // Geocoding API request with start address
  $geocodeFrom = file_get_contents('https://maps.googleapis.com/maps/api/geocode/json?address='.$formattedAddrFrom.'&sensor=false&key='.$apiKey);
  $outputFrom = json_decode($geocodeFrom);
  if(!empty($outputFrom->error_message)){
      return $outputFrom->error_message;
  }
  
  // Geocoding API request with end address
  $geocodeTo = file_get_contents('https://maps.googleapis.com/maps/api/geocode/json?address='.$formattedAddrTo.'&sensor=false&key='.$apiKey);
  $outputTo = json_decode($geocodeTo);
  if(!empty($outputTo->error_message)){
      return $outputTo->error_message;
  }
  
  // Get latitude and longitude from the geodata
  $latitudeFrom    = $outputFrom->results[0]->geometry->location->lat;
  $longitudeFrom    = $outputFrom->results[0]->geometry->location->lng;
  $latitudeTo        = $outputTo->results[0]->geometry->location->lat;
  $longitudeTo    = $outputTo->results[0]->geometry->location->lng;
  
  // Calculate distance between latitude and longitude
  $theta    = $longitudeFrom - $longitudeTo;
  $dist    = sin(deg2rad($latitudeFrom)) * sin(deg2rad($latitudeTo)) +  cos(deg2rad($latitudeFrom)) * cos(deg2rad($latitudeTo)) * cos(deg2rad($theta));
  $dist    = acos($dist);
  $dist    = rad2deg($dist);
  $miles    = $dist * 60 * 1.1515;
  
  // Convert unit and return distance
  $unit = strtoupper($unit);
  if($unit == "K"){
      return round($miles * 1.609344, 2).' km';
  }elseif($unit == "M"){
      return round($miles * 1609.344, 2).' meters';
  }else{
      return round($miles, 2).' miles';
  }
}

//
function distance_menu() { 
  $items = array(); 
  $items['admin/config/content/distance'] = array(
    'title' => 'Import', 
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('distance_form'), 
    'access arguments' => array('access administration pages'), 
    'type' => MENU_NORMAL_ITEM, 
  ); 
  return $items; 
}

function distance_form() { 

  $form = array(); 

  $form['browser'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Browser Upload'), 
    '#collapsible' => TRUE, 
    '#description' => t("Upload a CSV file."), 
  ); 

  $form['browser']['file_upload'] = array( 
    '#type' => 'file', 
    '#title' => t('CSV File'), 
    '#description' => t('Select the CSV file to be imported. ')
  ); 

  $form['submit'] = array( '#type' => 'submit', '#value' => t('Save'), ); 
  // set the form encoding type 

  $form['#submit'][] = 'distance_form_submit';
  $form['#validate'][] = 'distance_form_validate';

  $form['#attributes']['enctype'] = "multipart/form-data"; 
  return $form; 
}

function distance_form_validate($form, &$form_state) { 
  $extensions = array('file_validate_extensions' => array('csv'));
  // attempt to save the uploaded file 
  $file = file_save_upload('file_upload', $extensions); 
  // check file uploaded OK 
  if (!$file) { 
    form_set_error('file_upload', t('A file must be uploaded or selected from FTP updates.')); 
  } 
  else if($file->filemime != 'text/csv') { 
    form_set_error('file_upload', t('The file must be of CSV type only.')); 
  } 
  else { 
  // set files to form_state, to process when form is submitted 
    $form_state['values']['file_upload'] = $file; 
  } 
}

function distance_form_submit($form, &$form_state) {
  $c=1;
  $filepath = $form_state['values']['file_upload']-> uri;
  $row = 1;
  watchdog('distance_module', 'distance csv submitted');
  if (($handle = fopen($filepath, "r")) !== FALSE) {
    watchdog('distance_module', 'reading from csv');
    echo "<p> reading from csv <p>";
    while (($data = fgetcsv($handle)) !== FALSE) {
      $fp = fopen('output.csv', 'w');
      watchdog('distance_module', 'writing to csv');

      // watchdog executes
      // need to create & output to new csv for download
      if ($row == 1) {
        fputcsv($fp, $data);
      }
      else {
        fputcsv($fp, $data);
        // $address_array =  explode("\n", $data[$c]);   // parse address column by new line into an indexed array
        // $address_array_count = count($address_array); // number of entries in the address array
        // $address_string = $address_array[1] . " " . $address_array[2] . " " . $address_array[3];

        // // parse address string and pass as an argument to getDistance()
        // $address_string = preg_replace('/(# \d*)\s/', "", $address_string);
        // $address_string = preg_replace('/(#\d*)/', "", $address_string);
        // $address_string = preg_replace('/(Apt)/', "", $address_string);
        
        
        // $distance = getDistance($address_string, '690-5 Yamato Rd, Boca Raton, FL 33431');

        // // if the distance fits our criteria, output value to new CSV file
        // if ($distance < 30 && $distance > 7.5) {
        //   fputcsv($fp, $data);            
        // }
      };
      $row++;
    };
    fclose($handle);
    fclose($fp);
  };
};

